(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{410:function(s,a,t){"use strict";t.r(a);var e=t(2),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("索引是面试的必考项，我们今天就来搞定这个索引的全部内容")]),s._v(" "),a("h2",{attrs:{id:"索引分类以及底层结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引分类以及底层结构"}},[s._v("#")]),s._v(" 索引分类以及底层结构")]),s._v(" "),a("p",[s._v("按照物理存储的方式来分：分为聚簇索引（主键索引）和二级索引（辅助索引）；"),a("strong",[s._v("且创建的主键索引和二级索引默认都是使用 B+ 树作为索引。")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("聚簇索引和二级索引")]),s._v(" "),a("p",[s._v("通过主键来查询数据："),a("a",{attrs:{href:"https://pic1.zhimg.com/v2-9f771dd7c7749d7a7b2c60116a183218_b.jpg",target:"_blank",rel:"noopener noreferrer"}},[s._v("看清楚图"),a("OutboundLink")],1),s._v("："),a("strong",[s._v("节点间（数据页之间）是通过这个双向链表进行连接的；")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pic1.zhimg.com/v2-9f771dd7c7749d7a7b2c60116a183218_b.jpg",alt:"MySQL索引底层数据结构 - 知乎"}})]),s._v(" "),a("p",[s._v("B+ 树存储千万级的数据只需要 3-4 层高度就可以了，这意味着从千万级的表查询目标数据最多需要 3-4 次的磁盘IO，"),a("strong",[s._v("所以 B+ 树相比于 B 树和二叉树来说，最大的优势在于查询效率更高，因为即使在数据量很大的情况下，查询一个数据的磁盘 I/O 依然维持在 3-4 次")])]),s._v(" "),a("p",[s._v("通过二级索引来查询数据："),a("a",{attrs:{href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E7%B4%A2%E5%BC%95/%E5%9B%9E%E8%A1%A8.drawio.png",target:"_blank",rel:"noopener noreferrer"}},[s._v("看清楚图"),a("OutboundLink")],1),s._v("：（图中叶子节点之间我画了单向链表，但是实际上是双向链表）"),a("strong",[s._v("二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E7%B4%A2%E5%BC%95/%E5%9B%9E%E8%A1%A8.drawio.png",alt:"回表"}})]),s._v(" "),a("p",[s._v("不过，当查询的数据是能在二级索引的 B+ Tree 的叶子节点里查询到，这时就不用再查主键索引值，比如")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" product "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" product_no "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0002'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这种在二级索引的 B+ Tree 就能查询到结果的过程就叫做【覆盖索引】，也就是只需要查一个 B+ Tree 就能找到数据。")]),s._v(" "),a("p",[s._v("好了，接下来我们看看按照【字段特性】分类的索引")])]),s._v(" "),a("li",[a("p",[s._v("主键索引、唯一索引、普通索引、前缀索引")]),s._v(" "),a("p",[s._v("唯一索引：唯一索引建立在 UNIQUE 字段上的索引，"),a("strong",[s._v("一张表可以有多个唯一索引，索引列必须要要唯一，但是允许有空值")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 建表的时候")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" table_name {\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unique")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("col1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("col2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n}\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 建表后创建索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unique")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("col1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("col2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("唯一索引的数据结构："),a("strong",[s._v("也是 B+ 树；")])]),s._v(" "),a("p",[s._v("普通索引：就是"),a("strong",[s._v("建立在普通字段上的索引")]),s._v("，"),a("strong",[s._v("既不要求字段成为这个主键，也不要求字段唯一；")])]),s._v(" "),a("ul",[a("li",[s._v("这里延申一个问题？"),a("strong",[s._v("唯一索引和普通索引的区别是啥？")]),s._v(" "),a("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1948984",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考这个文章"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("前缀索引：是指对字符类型字段的"),a("strong",[s._v("前几个字符建立索引")]),s._v("，"),a("strong",[s._v("而不是整个字段建立的索引")]),s._v("，前缀索引可以建立在字段类型为 char、 varchar、binary、varbinary 的列上。使用前缀索引的"),a("strong",[s._v("目的是减少索引占用的存储空间，提升查找效率。")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 前缀索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 创建表时")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    column_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 创建表之后")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("单列索引、联合索引")]),s._v(" "),a("p",[s._v("联合索引：通过"),a("strong",[s._v("将多个字段组合成一个索引")]),s._v("，该索引就被称为联合索引。")]),s._v(" "),a("p",[s._v("比如说：我们给 product_no 和 name 字段组合成联合索引 "),a("code",[s._v("(product_no,name)")]),s._v("；"),a("a",{attrs:{href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E7%B4%A2%E5%BC%95/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95.drawio.png",target:"_blank",rel:"noopener noreferrer"}},[s._v("联合索引的示意图："),a("OutboundLink")],1)]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E7%B4%A2%E5%BC%95/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95.drawio.png",alt:"联合索引"}})]),s._v(" "),a("p",[a("strong",[s._v("联合索引查询的 B+ 树是按照 product_no 进行排序，然后 product_no 相同的情况再按照 name 字段排序")]),s._v("，因此，使用联合索引时，存在"),a("strong",[s._v("最左匹配原则")]),s._v("，也就是按照最左优先的方式进行索引的匹配。在使用联合索引进行查询的时候，如果不遵循「最左匹配原则」，联合索引会失效，这样就无法利用到索引快速查询的特性了。")]),s._v(" "),a("p",[s._v("比如说：如果创建了一个（a，b，c）联合索引，如果查询条件是以下几种，就可以匹配上联合索引：")]),s._v(" "),a("ul",[a("li",[s._v("where a = 1;")]),s._v(" "),a("li",[s._v("where a = 1 and b = 2 and c = 3;")]),s._v(" "),a("li",[s._v("where a = 1 and c = 3;")])]),s._v(" "),a("p",[s._v("需要注意的是，因为有查询优化器，"),a("strong",[s._v("所以 a 字段在 where 子句的顺序并不重要。")]),s._v(" 但是要知道，"),a("strong",[s._v("a 是全局有序的，而 b 和 c 是局部有序")]),s._v("；")]),s._v(" "),a("p",[s._v("这里有一个有意思的问题：哪些范围查询会导致联合索引的最做匹配原则会停止匹配呢？即"),a("strong",[s._v("并不是查询过程中使用了联合索引查询，就代表联合索引中的所有字段都用到了联合索引进行索引查询。")]),s._v(" "),a("a",{attrs:{href:"https://xiaolincoding.com/mysql/index/index_interview.html#%E6%8C%89%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B0%E5%88%86%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"}},[s._v("小林 coding"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("Q1："),a("code",[s._v("select * from t_table where a > 1 and b = 2")]),s._v("，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？")]),s._v(" "),a("p",[s._v("Q2："),a("code",[s._v("select * from t_table where a >= 1 and b = 2")]),s._v("，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？")]),s._v(" "),a("p",[s._v("Q3： "),a("code",[s._v("SELECT * FROM t_table WHERE a BETWEEN 2 AND 8 AND b = 2")]),s._v("，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？")]),s._v(" "),a("p",[s._v("Q4："),a("code",[s._v("SELECT * FROM t_user WHERE name like 'j%' and age = 22")]),s._v("，联合索引（name, age）哪一个字段用到了联合索引的 B+Tree？")]),s._v(" "),a("p",[s._v("结论："),a("strong",[s._v("联合索引的最左匹配原则，在遇到范围查询（如 >, <）的时候，就会停止匹配，也就是范围查询的字段可以使用到联合索引，但是范围查询之外的字段就无法使用到联合索引了；注意，对于 >=, <=，BETWEEN AND，like 前缀匹配的范围查询，并不会停止匹配；")])]),s._v(" "),a("p",[s._v("索引下推问题？")]),s._v(" "),a("p",[s._v("联合索引中 还有一个索引下推问题：比如执行 "),a("code",[s._v("select * from table where a > 1 and b = 2")]),s._v(" 的时候，只有 a 字段能用到索引，那么在联合索引的 B+ Tree 找到第一个满足条件的主键值（ID = 2）后，还需要判断其他条件是否满足（看 b 是否等于 2），那是在联合索引里判断？还是返回主键索引去判断？")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://xiaolincoding.com/mysql/base/how_select.html#%E7%AC%AC%E5%9B%9B%E6%AD%A5-%E6%89%A7%E8%A1%8C-sql",target:"_blank",rel:"noopener noreferrer"}},[s._v("小林 coding"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("索引下推就是做这个工作的："),a("strong",[s._v("在联合索引遍历过程中，对联合索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。")])]),s._v(" "),a("p",[s._v("也可以查看语句的执行计划里，出现了 Extra 为 Using index condition 就说明使用了索引下推的优化。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 联合索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index_a_b_c "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" tableName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("那问题来了，建立联合索引的时候，哪个字段在前是否有考究？是否会影响性能？")]),s._v(" "),a("p",[s._v("建立联合索引的字段顺序，对索引效率也有很大的影响；"),a("strong",[s._v("实际开发过程中，要把区分度大的字段排在前面，这样区分度大的字段越有可能被更多的 SQL 使用到。")]),s._v(" 比如，性别的区分度就很小，不适合建立索引或者不适合排在联合索引列的靠前的位置，而 UUID 这类字段就比较适合做索引或者排在联合索引列的靠前的位置。")]),s._v(" "),a("p",[s._v("这里也有一个问题：我们只需要查询商品的名称、价格，有什么可以避免回表的操作呢？")]),s._v(" "),a("p",[s._v("这里就需要用到覆盖索引："),a("strong",[s._v("覆盖索引是指 SQL 中 query 的所有字段，在索引 B+ Tree 的叶子节点上都能找得到的那些索引，从二级索引中查询得到的记录，而不需要通过聚簇索引查询获得，从而可以避免这个回表的操作。")])]),s._v(" "),a("p",[s._v("我们可以建立一个联合索引，即【商品ID、名称、价格】作为一个联合索引；如果索引中存在这些数据，查询将不会再次检索这个主键索引，从而避免回表。")])])]),s._v(" "),a("p",[s._v("联合索引实战题目")]),s._v(" "),a("p",[a("strong",[s._v("题目一：")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如何建立索引？")]),s._v(" "),a("p",[s._v("不能只说对 (a,b,c) 建立索引，而是对 (a,b,c) 或者(c,b,a) 或者 (b,a,c) 都可以。重点是将区分度高的字段放在前面，区分度低的放在后面，比如说：性别，状态这种字段区分度就很低，我们一般就放在后面。")]),s._v(" "),a("p",[s._v("假设区分度由大到小为 (b,c,a) ，那么我们对 (a,b,c) 进行建立索引的时候，在执行 "),a("code",[s._v("SQL")]),s._v(" 的时候，优化器就会帮我们进行调整，让我们的语句用上索引。")]),s._v(" "),a("p",[a("strong",[s._v("题目二：")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如何建立索引？")]),s._v(" "),a("p",[s._v("这道题不能说对 (a,b) 建立索引；正确的是要对 (b,a) 进行建立索引；如果建立的是 (a,b) 索引，那么只有 a 字段能用得上索引，毕竟联合索引遵循最左匹配原则；")]),s._v(" "),a("p",[s._v("那么如何能让两个字段都用上索引呢？就需要对 (b,a) 进行建立索引啦~优化器会帮我们调整 "),a("code",[s._v("where")]),s._v(" 后的 a 和 b 的顺序，让我们用上索引。")]),s._v(" "),a("p",[a("strong",[s._v("题目三：")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如何建立索引？(b,a) 或者 (c,b) 都是可以的。结合业务来进行设置索引；")]),s._v(" "),a("p",[s._v("延展一下：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("那么这个如何建立索引呢？哈哈，是啦~ (c,a,b) 或者 (a,b,c) 都是可以的！")]),s._v(" "),a("p",[a("strong",[s._v("题目四：")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如何建立索引？")]),s._v(" "),a("p",[s._v("给 (a,b) 建立索引，就是说，当 a = 1 时，b 相对有序，可以避免再次排序了。")]),s._v(" "),a("p",[s._v("拓展一下：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如何建立索引？")]),s._v(" "),a("p",[s._v("对 a 建立索引即可，因为 a 的值是一个范围，这个范围内 b 的值是无序的，所以没有必要对 (a,b) 建立索引。")]),s._v(" "),a("p",[s._v("再拓展一下：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("以此类推，a 有序，b 有序，c 的值是一个范围且 c 在于大于 3 这个范围内是有序的，那么如何建立索引？我觉得应该是 (a,b,c) 建立索引。")]),s._v(" "),a("p",[a("strong",[s._v("题目五：")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如何建立索引？")]),s._v(" "),a("p",[s._v("对 (a,b) 建立索引，因为 IN 在这里是作为一个等值引用，不会中止索引匹配，所以还是 (a,b)。")]),s._v(" "),a("p",[s._v("拓展一下")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("结合上面的案例和知识，应该给 (c,b,a) 建立索引才对，那样的话，三个字段都能用上索引了！")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("B+ Tree 索引、Hash 索引、Full-Text 索引")]),s._v(" "),a("p",[s._v("Hash 索引：我们的 InnoDB 存储引擎是不支持 Hash 索引的，但是"),a("strong",[s._v("支持一个自适应 Hash 索引")]),s._v("，"),a("a",{attrs:{href:"https://developer.aliyun.com/article/1230086#slide-3",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考这篇文章"),a("OutboundLink")],1),s._v(" ；（可以重点看看 "),a("strong",[s._v("通过Adaptive Hash Index访问记录的过程")]),s._v(" 和 "),a("strong",[s._v("Adaptive Hash Index 注意事项")]),s._v("）")]),s._v(" "),a("p",[s._v("InnoDB 会进行自我的调优，如果判定建立 Adaptive Hash Index （自适应哈希索引），能够提升查询效率，InnoDB 自己会在内存中建立相关哈希索引，不需要人工手动参与，InnoDB 会根据所需自己创建自适应哈希索引；所以这个角度来说，InnoDB 支持哈希索引。")]),s._v(" "),a("p",[s._v("那什么是 Full-Text 索引呢？"),a("a",{attrs:{href:"https://juejin.cn/post/7101116456489713700",target:"_blank",rel:"noopener noreferrer"}},[s._v("可以参考这篇文章"),a("OutboundLink")],1),s._v(" ，文章写的还是很详细的。")]),s._v(" "),a("p",[s._v("Full-Text 索引：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 全文索引的创建和使用")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" FULLTEXT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("index_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" FULLTEXT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("FULLTEXT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("和常用的【like】不同，全文索引有自己的格式，使用【match】和【against】关键字，如下：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" against"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aaa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);