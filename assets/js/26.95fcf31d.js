(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{414:function(v,_,e){"use strict";e.r(_);var t=e(2),o=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("都知道用的 "),_("code",[v._v("Redis")]),v._v(" 比较少，但是作为后端非常重要的一个中间件，必须要懂的；今天就想来总结一点 "),_("code",[v._v("Redis")]),v._v(" 的高频的八股文吧。")]),v._v(" "),_("p",[v._v("下文借鉴 "),_("a",{attrs:{href:"https://juejin.cn/post/7094237187343908900#heading-65",target:"_blank",rel:"noopener noreferrer"}},[v._v("三分恶"),_("OutboundLink")],1),v._v(" 以及 "),_("a",{attrs:{href:"https://xiaolincoding.com/redis/",target:"_blank",rel:"noopener noreferrer"}},[v._v("小林coding"),_("OutboundLink")],1)]),v._v(" "),_("h2",{attrs:{id:"基础知识"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[v._v("#")]),v._v(" 基础知识")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("基本数据结构")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/100e87a7da6149248c4604684b20a492~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[_("code",[v._v("String")])]),v._v(" "),_("p",[v._v("字符串类型是最基础的数据类型，其 value 可以是字符串（简单字符串，复杂字符串例如 "),_("code",[v._v("JSON")]),v._v("、"),_("code",[v._v("XML")]),v._v("），数字（整数、浮点数），甚至是二进制（图片、音频、视频），但是有一定的限值（512M）")]),v._v(" "),_("p",[v._v("使用场景：")]),v._v(" "),_("ul",[_("li",[v._v("缓存功能（下拉刷新功能）")]),v._v(" "),_("li",[v._v("计数（浏览量）")]),v._v(" "),_("li",[v._v("共享 "),_("code",[v._v("session")]),v._v(" （分布式系统下采取这个方案来使得 "),_("code",[v._v("session")]),v._v(" 一致）")]),v._v(" "),_("li",[v._v("分布式锁（"),_("code",[v._v("setNx()")]),v._v("）")])]),v._v(" "),_("p",[_("code",[v._v("hash")])]),v._v(" "),_("p",[v._v("哈希类型是指"),_("strong",[v._v("键值本身又是一个键值对结构")])]),v._v(" "),_("p",[v._v("应用场景：")]),v._v(" "),_("ul",[_("li",[v._v("购物车")]),v._v(" "),_("li",[v._v("缓存对象")])]),v._v(" "),_("p",[_("code",[v._v("list")])]),v._v(" "),_("p",[v._v("列表（"),_("code",[v._v("list")]),v._v("）类型是用来"),_("strong",[v._v("存储多个有序的字符串")]),v._v("，列表是一种比较灵活的数据结构，可以充当栈和队列的角色")]),v._v(" "),_("p",[v._v("使用场景：")]),v._v(" "),_("ul",[_("li",[v._v("消息队列")]),v._v(" "),_("li",[v._v("文章列表")])]),v._v(" "),_("p",[_("code",[v._v("set")])]),v._v(" "),_("p",[v._v("集合 set 类型也是用来保存多个元素的，但是和列表不一样，集合中不允许有重复的元素，并且集合中的元素是无序的；")]),v._v(" "),_("p",[v._v("使用场景：")]),v._v(" "),_("ul",[_("li",[v._v("共同关注好友类型")]),v._v(" "),_("li",[v._v("点赞")])]),v._v(" "),_("p",[_("code",[v._v("zset")])]),v._v(" "),_("p",[v._v("这个是"),_("strong",[v._v("有序集合")]),v._v("，存储的元素是有序的；但是"),_("strong",[v._v("他和列表使用的索引下标作为排序依据不同")]),v._v("，他给"),_("strong",[v._v("每个元素设置一个权重（"),_("code",[v._v("score")]),v._v("）作为排序的依据")]),v._v("。")]),v._v(" "),_("p",[v._v("使用场景：")]),v._v(" "),_("ul",[_("li",[v._v("用户点赞统计")]),v._v(" "),_("li",[v._v("用户排序")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("Redis")]),v._v(" 为什么这么快呢？")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("完全基于内存的操作")])]),v._v(" "),_("li",[_("p",[v._v("使用的是 单 Reactor 单线程，避免了线程切换和竞态产生的消耗，这个可以"),_("a",{attrs:{href:"https://mltbjl.github.io/blogs/category1/2018/OS%20%E4%B9%8B%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.html#%E4%BB%80%E4%B9%88%E6%98%AF-dma-%E6%8A%80%E6%9C%AF",target:"_blank",rel:"noopener noreferrer"}},[v._v("参考一下这篇文章"),_("OutboundLink")],1)])]),v._v(" "),_("li",[_("p",[v._v("基于非阻塞的 IO 多路复用机制")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://mltbjl.github.io/blogs/category1/2018/OS%20%E4%B9%8B%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.html#%E4%BB%80%E4%B9%88%E6%98%AF-dma-%E6%8A%80%E6%9C%AF",target:"_blank",rel:"noopener noreferrer"}},[v._v("参考一下这个文章"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("可以举个例子")]),v._v(" "),_("p",[v._v("这里最重要就是理解 "),_("code",[v._v("epoll")]),v._v(" 模式：老师在讲台上等，谁解答完谁举手；这时C、D举手，表示他们解答问题完毕，你下去依次检查C、D的答案，然后继续在讲台上等，此时E、A又举手，然后再去处理E、A。")])]),v._v(" "),_("li",[_("p",[v._v("C语言实现的，使用优化过的数据结构")])])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("Redis")]),v._v(" 真的是单线程？")]),v._v(" "),_("p",[v._v("GPT 回答："),_("code",[v._v("Redis")]),v._v(" 是使用单线程（一个主线程）来处理所有客户端请求的，但是它使用了非阻塞的 "),_("code",[v._v("IO")]),v._v(" 多路复用以及 单"),_("code",[v._v("Reactor")]),v._v("单线程模式进行处理的，通过异步处理多个客户端请求和并行执行多个操作，从而实现高性能的。")]),v._v(" "),_("p",[v._v("但是 "),_("code",[v._v("Redis")]),v._v(" 整个中间件"),_("strong",[v._v("不是单线程的")]),v._v("，因为还有后台线程进行"),_("strong",[v._v("处理清理脏数据、无用链接的释放、大 "),_("code",[v._v("Key")]),v._v(" 的删除等操作")]),v._v("。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("Redis")]),v._v(" 6.0 使用多线程处理客户端请求？")]),v._v(" "),_("p",[v._v("这里引用了多线程来"),_("strong",[v._v("处理数据的读写和协议解析")]),v._v("，但是 "),_("code",[v._v("Redis")]),v._v(" "),_("strong",[v._v("执行命令还是单线程")]),v._v("的。")])])]),v._v(" "),_("h2",{attrs:{id:"缓存篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存篇"}},[v._v("#")]),v._v(" 缓存篇")]),v._v(" "),_("p",[v._v("经典的缓存击穿、缓存穿透、缓存雪崩")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("缓存击穿")]),v._v(" "),_("p",[v._v("什么是缓存击穿问题？就是"),_("strong",[v._v("一个并发访问量比较大的 key 在某个时间过期，导致所有的请求直接打在了 DB 上")]),v._v("。")]),v._v(" "),_("p",[v._v("如果单单只考虑 "),_("code",[v._v("Redis")]),v._v(" 层的问题是不够的：")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ce2521931244cf4b172a66280c3a4c7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("①加锁更新，请求查询A，发现缓存中没有存在，对 A 这个 "),_("code",[v._v("key")]),v._v(" 进行加锁，同时去数据库查询数据，写入缓存，再返回给用户，这样后面的请求就可以从缓存中进行获取了。")]),v._v(" "),_("p",[v._v("②将过期时间组合写在 "),_("code",[v._v("value")]),v._v(" 中，通过异步的方式进行不断刷新过期时间；")]),v._v(" "),_("p",[v._v("用 "),_("code",[v._v("Jemeter")]),v._v(" 压测，500w数据的表，聚簇索引去查 "),_("code",[v._v("QPS")]),v._v("（每秒能够响应的请求） 7w，普通索引是2700多， 这个问题是高并发架构问题，不是 "),_("code",[v._v("Redis")]),v._v(" 本身的问题")]),v._v(" "),_("ol",[_("li",[v._v("正确评估系统的容量 和 业务的慢查询")]),v._v(" "),_("li",[v._v("你需要知道所有用缓存的场景 当我们的key 缓存失效的时候，你的数据库能承载的数据的并发是多少   用查询是多少耗时不用是多少耗时")]),v._v(" "),_("li",[v._v("查询一般排除网络因素的情况下，保持在 200ms 是可观的")]),v._v(" "),_("li",[v._v("缓存监控呢？")]),v._v(" "),_("li",[v._v("系统降级熔断策略？")]),v._v(" "),_("li",[v._v("最重要的做好一些保底方案")])])]),v._v(" "),_("li",[_("p",[v._v("缓存雪崩")]),v._v(" "),_("p",[v._v("缓存学崩就是同一个时间内大量的 "),_("code",[v._v("key")]),v._v(" 失效了或者是服务宕机，这样导致的后果就是大量的请求进来直接打到 DB 上，可以导致整个系统崩溃。")])]),v._v(" "),_("li",[_("p",[v._v("缓存穿透")]),v._v(" "),_("p",[v._v("指的是查询缓存和数据库中都不存在的数据，这样每次请求直接打到数据库，就好像缓存不存在一样。")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1caeaf7f70d24602873aab87bd094af3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("缓存穿透有两种原因：①本身业务代码有问题；②恶意攻击，爬虫造成空命中；")]),v._v(" "),_("p",[v._v("解决方法：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("缓存空值或者是默认值")]),v._v(" "),_("p",[v._v("缓存空值有两个问题：")]),v._v(" "),_("ol",[_("li",[v._v("空值做了缓存，意味着缓存层存了更多的键，比较有效的方法就是给这类数据进行设置一个较短的时间，让其自动过期剔除；")]),v._v(" "),_("li",[v._v("缓存层和存储层会有一段时间的数据不一致；例如过期时间设置为五分钟，在五分钟的时候存储层真的添加的这个数据，但是查询的时候还是返回的是空值，就会导致数据不一致了，这个时候可以利用消息队列或者其他异步的方式进行清理缓存中的空对象。")])])]),v._v(" "),_("li",[_("p",[v._v("布隆过滤器")]),v._v(" "),_("p",[v._v("在存储和缓存之前，加一个布隆过滤器，做一层过滤； "),_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e07aced98ad4ef49bde2bb0402284b2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("这里需要了解一下这个"),_("strong",[v._v("布隆过滤器的原理")]),v._v("：")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f04d7a0799f343dc88e9a1d3f3226e8a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("是一个"),_("strong",[v._v("连续的位图数据结构")]),v._v("，每个存储位存储的都是 0 或者 1，来标识数据是否存在；")]),v._v(" "),_("p",[v._v("如果判断缓存 "),_("code",[v._v("key")]),v._v(" 存在，K 个 "),_("code",[v._v("Hash")]),v._v(" 函数会将这个 "),_("code",[v._v("key")]),v._v(" 映射在 "),_("code",[v._v("bit")]),v._v(" 列表上的 K 个点，判断是不是1：")]),v._v(" "),_("ul",[_("li",[v._v("如果全不是1，那么 "),_("code",[v._v("key")]),v._v(" 不存在；")]),v._v(" "),_("li",[v._v("如果都是1，也只是表示 "),_("code",[v._v("key")]),v._v(" 可能存在；")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("判断元素的时候有一定的几率是错误的，毕竟哈希函数有一定的碰撞机率；")]),v._v(" "),_("li",[v._v("不支持删除元素。")])])])])]),v._v(" "),_("li",[_("p",[v._v("数据一致性问题")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb5ee0b09d6744beaf11d3ceccaa8ce3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("根据 "),_("code",[v._v("CAP")]),v._v(" 理论，"),_("strong",[v._v("在保证可用性和分区容错性的前提下，无法保证一致性")]),v._v("，所以缓存和数据库的绝对一致是不可能实现的，只能尽可能"),_("strong",[v._v("保存缓存和数据库的最终一致性")]),v._v("。")]),v._v(" "),_("p",[v._v("首先我们需要确立一个思想，"),_("strong",[v._v("删除缓存而不是更新缓存。")])]),v._v(" "),_("p",[_("strong",[v._v("为什么")]),v._v(" 缓存更新需要耗费资源，直接删除，用的时候从数据库中获取然后写入缓存中，省性能。")]),v._v(" "),_("p",[_("strong",[v._v("先更新数据库，再删除缓存")])]),v._v(" "),_("p",[v._v("删除失败怎么办？那从缓存读到的数据还是脏数据啊？ "),_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d38a0fcf49004669b7ff0cdf7a6b6149~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("ul",[_("li",[_("p",[v._v("消息队列重试机制 "),_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3c370cf9b5a4444a05bb7501ea7d4dc~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("如果删除缓存失败，向消息队列发送异步消息，把删除失败的 "),_("code",[v._v("key")]),v._v(" 放进去，消费消息队列，获取要删除的 "),_("code",[v._v("key")]),v._v(" ，然后去重试删除；")]),v._v(" "),_("p",[v._v("但是缺点是，好好的业务，引入新的中间件，复杂度提升了。。。")])]),v._v(" "),_("li",[_("p",[v._v("监听 "),_("code",[v._v("binlog")]),v._v(" 异步删除 "),_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8b0b6efa4c64babbc834149b6e0f36a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("利用一个服务（阿里的 "),_("code",[v._v("canal")]),v._v("）去监听数据库的 "),_("code",[v._v("binlog")]),v._v("，获取需要操作的数据；")]),v._v(" "),_("p",[v._v("然后另外一个服务获取订阅程序传来的信息，进行缓存删除操作；")]),v._v(" "),_("p",[v._v("但是还是需要消息队列进行兜底。。。")])])]),v._v(" "),_("p",[_("strong",[v._v("先删除缓存，再更新数据库")])]),v._v(" "),_("p",[v._v("也会出现这个一致性问题。")]),v._v(" "),_("p",[v._v("并发情况下，先删除缓存，再更新数据库，此时数据库还未更新成功，这时候有其他线程读取缓存读取不到就去数据库中读取到了旧值，这时候就会出现缓存不一致了。 "),_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abb14952f1574629baf244adf760ef8c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("ul",[_("li",[_("p",[v._v("延迟双删 "),_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29e32dda00ba465ba6cd1ab45d98dc11~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("在删除缓存，更新数据库之后，休眠一段时间（但是这个就很难琢磨），再次删除缓存。这个睡眠时间，主要是为了确保请求 A 在睡眠的时候，请求 B 能够在这个一段时间内【从数据库读取数据，再把缺失的缓存写入缓存】的操作，然后请求 A 睡眠完，再删除缓存；")]),v._v(" "),_("p",[v._v("延时双删，就把缓存里缓存的旧值给删除了；")]),v._v(" "),_("p",[v._v("再有请求进来，就是读取数据库里的新值，再把新值保存到缓存中。（失败了怎么办？重试。。。。）")]),v._v(" "),_("p",[v._v("关于删除，还有一个兜底的方案 ---- "),_("strong",[v._v("设置缓存过期时间")]),v._v("，这样的话脏数据总有过期的时时候嘛不至于一直不一致。小林 codig 建议使用【先更新数据库，再删除缓存】")])])])])]),v._v(" "),_("h2",{attrs:{id:"持久篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#持久篇"}},[v._v("#")]),v._v(" 持久篇")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d775dae96eef4d7ca15598afa37fc72f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("AOF")])]),v._v(" "),_("p",[_("code",[v._v("append only file")]),v._v("：以独立日志的方式记录每次写命令，重启时再启动执行 "),_("code",[v._v("AOF")]),v._v(" 文件中的命令以达到恢复数据的目的。"),_("code",[v._v("AOF")]),v._v(" 的主要作用是解决数据持久化的实时性，是 "),_("code",[v._v("Redis")]),v._v(" 持久化的主流方式。")]),v._v(" "),_("p",[_("code",[v._v("AOF")]),v._v("：当主进程执行完操作命令后，会紧接着执行将命令写入到 "),_("code",[v._v("AOF")]),v._v(" 文件的操作；这里有三种写回策略，分别是 "),_("code",[v._v("Always")]),v._v("、"),_("code",[v._v("No")]),v._v("、"),_("code",[v._v("EverySec")]),v._v("；写回的过程是：首先主进程将命令写入到 "),_("code",[v._v("server.aof_buf")]),v._v(" 文件中，然后通过 "),_("code",[v._v("write()")]),v._v(" 系统调用将数据拷贝到 "),_("code",[v._v("AOF")]),v._v(" 文件中，然后再将数据拷贝到这个内核缓冲区中；"),_("strong",[v._v("由内核缓冲区来决定啥时候写入磁盘；")]),v._v(" "),_("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/4eeef4dd1bedd2ffe0b84d4eaa0dbdea.png",alt:"img"}})]),v._v(" "),_("p",[_("a",{attrs:{href:"https://cdn.xiaolincoding.com//mysql/other/98987d9417b2bab43087f45fc959d32a.png",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/98987d9417b2bab43087f45fc959d32a.png",alt:"img"}})]),v._v(" "),_("p",[v._v("为了防止这个文件过大，"),_("code",[v._v("AOF")]),v._v(" 采用这个重写机制来进行压缩文件，防止 "),_("code",[v._v("Redis")]),v._v(" 重启时，时间过久；同时 "),_("code",[v._v("AOF")]),v._v(" 的重写操作不能在主线程进行的，需要使用到"),_("strong",[v._v("写时复制")]),v._v("技术；")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("RDB")])]),v._v(" "),_("p",[_("code",[v._v("RDB")]),v._v(" 持久化就是将当前进程数据生成快照保存在硬盘的过程，触发 "),_("code",[v._v("RDB")]),v._v(" 持久化过程分为手动触发和自动触发")]),v._v(" "),_("p",[v._v("手动触发对应 "),_("code",[v._v("save")]),v._v(" 和 "),_("code",[v._v("bgsave")]),v._v("：一个阻塞主线程一个不阻塞 "),_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7878881b559d43ce8423843a1d4f813b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("重点了解一下这个 "),_("code",[v._v("bgsave")]),v._v("：我们执行 "),_("code",[v._v("fork")]),v._v(" 操作创建子线程，"),_("code",[v._v("RDB")]),v._v(" 持久化过程由子进程负责，完成后自动结束，阻塞只发生在 "),_("code",[v._v("fork")]),v._v(" 阶段，时间短；")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("AOF")]),v._v(" 和 "),_("code",[v._v("RDB")]),v._v(" 的混合")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81c23f6e65c143ce889519136dd46295~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("将 "),_("code",[v._v("RDB")]),v._v(" 文件的内容和增量的 "),_("code",[v._v("AOF")]),v._v(" 日志文件放在一起，这里的 "),_("code",[v._v("AOF")]),v._v(" 日志不再是全量的日志，而是 "),_("strong",[v._v("自持久化（也就是 "),_("code",[v._v("Redis")]),v._v(" 开始执行持久化操作的时刻）开始到持久化结束（"),_("code",[v._v("Redis")]),v._v(" 将数据完全写入 "),_("code",[v._v("AOF")]),v._v(" 文件并完成持久化时刻）")]),v._v(" 的这段时间发生的增量 "),_("code",[v._v("AOF")]),v._v(" 日志，通常这部分的 "),_("code",[v._v("AOF")]),v._v(" 日志很小。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("RDB")]),v._v(" 和 "),_("code",[v._v("AOF")]),v._v(" 如何选择？")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5cc20579aa14cde9afbbceaab5125a1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("都要使用，当 "),_("code",[v._v("Redis")]),v._v(" 启动的时候优先载入 "),_("code",[v._v("AOF")]),v._v(" 文件来恢复原始数据，因为 "),_("code",[v._v("AOF")]),v._v(" 文件保存的数据比 "),_("code",[v._v("RDB")]),v._v(" 完整；")]),v._v(" "),_("p",[v._v("接收几分钟的数据丢失可以只使用 "),_("code",[v._v("RDB")]),v._v(" 持久化")]),v._v(" "),_("p",[v._v("不建议只使用 "),_("code",[v._v("AOF")]),v._v("，因为 "),_("code",[v._v("RDB")]),v._v(" 非常适用文件数据的备份，并且 "),_("code",[v._v("RDB")]),v._v(" 恢复数据的速度比 "),_("code",[v._v("AOF")]),v._v(" 快；")])])]),v._v(" "),_("h2",{attrs:{id:"数据结构篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据结构篇"}},[v._v("#")]),v._v(" 数据结构篇")]),v._v(" "),_("p",[v._v("重点是"),_("strong",[v._v("跳表")])]),v._v(" "),_("p",[_("a",{attrs:{href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/3%E5%B1%82%E8%B7%B3%E8%A1%A8-%E8%B7%A8%E5%BA%A6.drawio.png",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[_("code",[v._v("Redis")]),v._v(" 中只有 "),_("code",[v._v("Zset")]),v._v(" 对象的底层实现用到了跳表，跳表的优势就是能支持平均"),_("code",[v._v("O(logN)")]),v._v(" 复杂度的节点查找。")]),v._v(" "),_("p",[v._v("跳表的数据结构：")]),v._v(" "),_("div",{staticClass:"language-C line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("typedef")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("struct")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("zskiplistNode")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//Zset 对象的元素值")]),v._v("\n    sds ele"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//元素权重值")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("double")]),v._v(" score"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//后向指针")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("struct")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("zskiplistNode")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("*")]),v._v("backward"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n  \n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//节点的level数组，保存每层上的前向指针和跨度")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("struct")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("zskiplistLevel")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("struct")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("zskiplistNode")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("*")]),v._v("forward"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("unsigned")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("long")]),v._v(" span"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v(" level"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v(" zskiplistNode"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br"),_("span",{staticClass:"line-number"},[v._v("8")]),_("br"),_("span",{staticClass:"line-number"},[v._v("9")]),_("br"),_("span",{staticClass:"line-number"},[v._v("10")]),_("br"),_("span",{staticClass:"line-number"},[v._v("11")]),_("br"),_("span",{staticClass:"line-number"},[v._v("12")]),_("br"),_("span",{staticClass:"line-number"},[v._v("13")]),_("br"),_("span",{staticClass:"line-number"},[v._v("14")]),_("br")])]),_("p",[_("code",[v._v("Zset")]),v._v(" 对象同时保存【元素】和【元素的权重】，节点的权重是一个 "),_("code",[v._v("double")]),v._v(" 类型的浮点数，跳跃表中所有的节点都是按照"),_("strong",[v._v("这个权重从小到大来排序的")]),v._v("；前向指针和后向指针都是为了方便查询；【跨度】作用是：计算这个节点在跳表中的排位，实际我也不知道他是干啥的哈哈。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("查询过程")]),v._v(" "),_("p",[v._v("直接看图就行，从最高层开始查找，找不到就到下一个层级依次找即可，可以借助查找【元素：abcd，权重：4】的节点来进行学习。")])]),v._v(" "),_("li",[_("p",[v._v("为什么用跳表而不是"),_("strong",[v._v("红黑树/平衡树")]),v._v("呢？")]),v._v(" "),_("p",[v._v("第一点，红黑树/平衡树都是一个自适应的平衡操作；但是对于跳表来说只需要局部的调整即可，不用涉及到整棵树的操作；")]),v._v(" "),_("p",[v._v("第二点，实现难度来说跳表更加简单看起来也很直观。")]),v._v(" "),_("p",[v._v("其实本质也是为了查询而已。")])])]),v._v(" "),_("h2",{attrs:{id:"运维篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运维篇"}},[v._v("#")]),v._v(" 运维篇")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("Redis")]),v._v(" 的过期数据（具体说就是过期 "),_("code",[v._v("key")]),v._v(" ）回收策略有哪些？")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c19f8f9758b3464fa36283d3695aa3cb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("惰性删除：惰性删除指的是当我们查询 "),_("code",[v._v("key")]),v._v(" 的时候才对 "),_("code",[v._v("key")]),v._v(" 进行处理，如果达到了过期时间则进行删除；显然"),_("strong",[v._v("缺点就是")]),v._v("：假如这些过期的 "),_("code",[v._v("key")]),v._v(" 一直没有被访问，那么他就一直无法被删除，而且一直占用内存的；")]),v._v(" "),_("p",[v._v("定期删除："),_("code",[v._v("Redis")]),v._v(" 会每隔一段时间对数据库做一次检查，删除里面的过期 "),_("code",[v._v("key")]),v._v("，由于不可能对所有 "),_("code",[v._v("key")]),v._v(" 去做轮询来删除，所以 "),_("code",[v._v("Redis")]),v._v(" 会每次随机取一些 "),_("code",[v._v("key")]),v._v(" 去做检查和删除。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("Redis")]),v._v(" 有哪些内存溢出控制？")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/048df4c55dc04a4486641626fa7ed088~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("如何记忆？两个维度 四个方面")]),v._v(" "),_("p",[_("strong",[v._v("两个维度")]),v._v("："),_("code",[v._v("LRU")]),v._v(" 和 "),_("code",[v._v("LFU")])]),v._v(" "),_("p",[_("strong",[v._v("四个方面")]),v._v("："),_("code",[v._v("ttl")]),v._v("（准备过期键）、"),_("code",[v._v("LRU")]),v._v("（最近最少使用）、"),_("code",[v._v("LFU")]),v._v("（频率最少使用）、"),_("code",[v._v("random")]),v._v("（随机的键）")]),v._v(" "),_("p",[_("code",[v._v("LRU")]),v._v(" 算法如何实现？")]),v._v(" "),_("p",[_("code",[v._v("LRU")]),v._v(" 是 Least Recently Used 翻译为"),_("strong",[v._v("最近最少使用")]),v._v("。")]),v._v(" "),_("p",[v._v("传统的 "),_("code",[v._v("LRU")]),v._v(" 是基于 "),_("code",[v._v("HashMap")]),v._v(" 和 双向链表来实现的；有弊端：用链表管理缓存数据，有空间开销；当数据被访问时，需要将链表上的数据移动到头端，如果有大量数据被访问，带来很多链表上移动的操作，耗时；")]),v._v(" "),_("p",[_("code",[v._v("Redis")]),v._v(" 实现 "),_("code",[v._v("LRU")]),v._v(" 算法："),_("strong",[v._v("实现方式是在 "),_("code",[v._v("Redis")]),v._v(" 的对象结构中添加了一个额外的字段，用于记录此数据的最后一次的访问时间。")])]),v._v(" "),_("p",[v._v("当 "),_("code",[v._v("Redis")]),v._v(" 进行内存淘汰的时候，会使用"),_("strong",[v._v("随机采用的方式进行淘汰数据")]),v._v("，随机抽取几个数据，然后"),_("strong",[v._v("淘汰最久没有使用的那一个")]),v._v("。")]),v._v(" "),_("p",[v._v("但是 "),_("code",[v._v("LRU")]),v._v(" 算法"),_("strong",[v._v("无法解决缓存污染的问题")]),v._v("；比如应用一次性读取了很多数据，而这些数据只会被读取一次，那么这些数据就会留存在 "),_("code",[v._v("Redis")]),v._v(" 缓存中一段时间，造成缓存污染。")]),v._v(" "),_("p",[_("code",[v._v("LFU")]),v._v(" 算法如何实现？")]),v._v(" "),_("p",[_("code",[v._v("LFU")]),v._v(" 是 Least Frequently Used 翻译为"),_("strong",[v._v("最近最不常用")]),v._v("；")]),v._v(" "),_("p",[_("code",[v._v("LFU")]),v._v(" 是根"),_("strong",[v._v("据数据访问的次数（应该是频次）来进行淘汰数据的")]),v._v("，核心思想是：“如果数据过去被访问多次，那么将来被访问的频率也会很高。”")]),v._v(" "),_("p",[_("code",[v._v("Redis")]),v._v(" 如何实现呢？")]),v._v(" "),_("p",[_("code",[v._v("LFU")]),v._v(" 相比于 "),_("code",[v._v("LRU")]),v._v(" 算法，多记录了【数据的访问频次】的信息；")]),v._v(" "),_("div",{staticClass:"language-C line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("typedef")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("struct")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("redisObject")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("\n      \n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 24 bits，用于记录对象的访问信息")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("unsigned")]),v._v(" lru"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("24")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("  \n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v(" robj"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br")])]),_("p",[_("code",[v._v("Redis")]),v._v(" 对象头的 "),_("code",[v._v("lru")]),v._v(" 字段，"),_("code",[v._v("LRU")]),v._v(" 算法中和 "),_("code",[v._v("LFU")]),v._v(" 算法中的意义不一样。")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5/lru%E5%AD%97%E6%AE%B5.png",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("p",[_("strong",[v._v("在 "),_("code",[v._v("LRU")]),v._v(" 算法中")]),v._v("，"),_("code",[v._v("Redis")]),v._v(" 对象头中的 "),_("strong",[_("code",[v._v("lru")]),v._v(" 字段是用来记录 "),_("code",[v._v("key")]),v._v(" 的访问时间戳的")]),v._v("，因此在 "),_("code",[v._v("LRU")]),v._v(" 模式下，"),_("code",[v._v("Redis")]),v._v(" 可以根据对象头的 "),_("code",[v._v("lru")]),v._v(" 字段记录的值，"),_("strong",[v._v("来比较最后一次的 "),_("code",[v._v("key")]),v._v(" 的访问时间大小")]),v._v("，"),_("strong",[v._v("从而淘汰最久未被使用的 key；")])]),v._v(" "),_("p",[_("strong",[v._v("在 "),_("code",[v._v("LFU")]),v._v(" 算法中")]),v._v("，"),_("code",[v._v("Redis")]),v._v(" 对象头中的 "),_("code",[v._v("lru")]),v._v(" 字段分两段存储，高16位（"),_("code",[v._v("ldt")]),v._v("）"),_("strong",[v._v("存储 "),_("code",[v._v("key")]),v._v(" 的访问时间戳")]),v._v("，低16位（"),_("code",[v._v("logc")]),v._v("）"),_("strong",[v._v("存储 "),_("code",[v._v("key")]),v._v(" 的访问频次")]),v._v("，值越小证明使用频率越低，越容易淘汰；在每次 "),_("code",[v._v("key")]),v._v(" 被访问的时候，会对 "),_("code",[v._v("logc")]),v._v(" 做一个衰减的操作，"),_("strong",[v._v("衰减的值跟前后访问时间的差距有关系")]),v._v("，如果上一次访问的时间与这一次访问的时间差距很大，那么衰减的值就越大，这样实现的 "),_("code",[v._v("LFU")]),v._v(" 算法是"),_("strong",[v._v("根据访问频率来淘汰数据的，而不是访问次数")]),v._v("。")])])]),v._v(" "),_("h2",{attrs:{id:"场景思考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#场景思考"}},[v._v("#")]),v._v(" 场景思考")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("假如 "),_("code",[v._v("Redis")]),v._v(" 里头有 1 亿个 "),_("code",[v._v("key")]),v._v(" ，其中有 10w 个 "),_("code",[v._v("key")]),v._v(" 是以某个固定的已知的前缀开头的，如何将它们全部找出来？")]),v._v(" "),_("p",[v._v("使用 "),_("strong",[_("code",[v._v("keys")])]),v._v(" 指令可以扫出指定模式的 "),_("code",[v._v("key")]),v._v(" 列表，但是要注意 "),_("code",[v._v("keys")]),v._v(" 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才会恢复；")]),v._v(" "),_("p",[v._v("所以我们用 "),_("strong",[_("code",[v._v("scan")]),v._v(" 指令")]),v._v("，"),_("code",[v._v("scan")]),v._v(" 指令可以"),_("strong",[v._v("无阻塞（异步")]),v._v("提取指定模式的 "),_("code",[v._v("key")]),v._v(" 列表，但是会有一定的重复概率，在客户端做一次去重即可，但是整体花费的时间会长一些。")])]),v._v(" "),_("li",[_("p",[v._v("大 key 问题")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("什么是大 "),_("code",[v._v("key")]),v._v(" ？")]),v._v(" "),_("p",[v._v("单个简单的 key 存储的 "),_("code",[v._v("value")]),v._v(" 很大，"),_("code",[v._v("size")]),v._v(" 超过 10KB；")]),v._v(" "),_("p",[_("code",[v._v("hash")]),v._v("、"),_("code",[v._v("set")]),v._v("、"),_("code",[v._v("zset")]),v._v("、"),_("code",[v._v("list")]),v._v(" 中存储过多的元素（以万为单位）。")])]),v._v(" "),_("li",[_("p",[v._v("大 "),_("code",[v._v("key")]),v._v(" 会有什么问题？")]),v._v(" "),_("p",[v._v("客户端耗时增加，甚至超时；")]),v._v(" "),_("p",[v._v("对大 "),_("code",[v._v("key")]),v._v(" 进行 "),_("code",[v._v("IO")]),v._v(" 操作严重影响带宽和 "),_("code",[v._v("CPU")])]),v._v(" "),_("p",[v._v("删除 "),_("code",[v._v("Key")]),v._v(" 的时候会有阻塞")])]),v._v(" "),_("li",[_("p",[v._v("如何找到大 "),_("code",[v._v("Key")]),v._v("？")]),v._v(" "),_("p",[_("code",[v._v("bigKeys")]),v._v(" 命令：使用 "),_("code",[v._v("bigKeys")]),v._v(" 命令以遍历的方式分析 "),_("code",[v._v("Redis")]),v._v(" 实例中的所有 "),_("code",[v._v("Key")]),v._v("，并返回整体统计信息与每个数据中的 "),_("code",[v._v("TOP1")]),v._v(" 的大 Key")]),v._v(" "),_("p",[_("code",[v._v("redis-rdb-tools")]),v._v("："),_("code",[v._v("redis-rdb-tools")]),v._v(" 是由 "),_("code",[v._v("Python")]),v._v(" 写的用来分析 "),_("code",[v._v("Redis")]),v._v(" 的 "),_("code",[v._v("rdb")]),v._v(" 快照文件用的工具，它可以把 "),_("code",[v._v("rdb")]),v._v(" 快照文件生成 "),_("code",[v._v("json")]),v._v(" 文件或者生成报表用来分析 "),_("code",[v._v("Redis")]),v._v(" 的使用详情。")])]),v._v(" "),_("li",[_("p",[v._v("如何避免大 "),_("code",[v._v("Key")]),v._v("？")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8074768d2684898847122267c574608~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"}},[v._v("图片"),_("OutboundLink")],1)]),v._v(" "),_("ul",[_("li",[_("p",[v._v("删除大 Key")]),v._v(" "),_("p",[v._v("反正核心不要使用阻塞主线程的命令就行了，用异步的线程进行删除；使用 "),_("code",[v._v("UNLINK")]),v._v(" 命令安全进行删除大 key，不要使用 "),_("code",[v._v("DEL")]),v._v(" 命令；")])]),v._v(" "),_("li",[_("p",[v._v("压缩和拆分 Key")]),v._v(" "),_("p",[v._v("当 "),_("code",[v._v("value")]),v._v(" 是 "),_("code",[v._v("String")]),v._v(" 时，可以采取 序列化或者压缩算法 将 "),_("code",[v._v("key")]),v._v(" 大小控制在合理范围内，但是会带来时间上的消耗；")]),v._v(" "),_("p",[v._v("如果压缩之后 "),_("code",[v._v("value")]),v._v(" 还是大 "),_("code",[v._v("key")]),v._v(" ，则需要进行拆分，将一个大 "),_("code",[v._v("key")]),v._v(" 分为不同的部分，记录每个部分的 "),_("code",[v._v("key")]),v._v("，使用 "),_("code",[v._v("multiget")]),v._v(" 等操作实现事务获取；")]),v._v(" "),_("p",[v._v("当 "),_("code",[v._v("value")]),v._v(" 是 "),_("code",[v._v("list")]),v._v(" 或者 "),_("code",[v._v("set")]),v._v(" 集合类型时，可以根据不同类型的数据规模进行分片，不同的元素计算后分到不同的片。")])])])])])])])])}),[],!1,null,null,null);_.default=o.exports}}]);