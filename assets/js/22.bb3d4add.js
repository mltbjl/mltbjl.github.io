(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{411:function(_,v,t){"use strict";t.r(v);var e=t(2),c=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[_._v("本篇不打算含有过多的代码解释，大概率是纯原理的文章，旨在更加理解Netty框架的底层原理 -- NIO的原理。接下来认识一下最重要的三个组件。")]),_._v(" "),v("h2",{attrs:{id:"channel"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#channel"}},[_._v("#")]),_._v(" Channel")]),_._v(" "),v("p",[_._v("顾名思义这是通信管道的意思，在NIO中充当数据通道的作用。")]),_._v(" "),v("p",[v("strong",[_._v("NIO所有数据都通过"),v("code",[_._v("Buffer")]),_._v("对象处理")]),_._v("；不会将字节写入"),v("code",[_._v("channel")]),_._v("通道中，但是将字节数据可以写入缓冲区；同理，你也不能在"),v("code",[_._v("channel")]),_._v("通道中读取到字节，而是将数据输入到缓冲区，然后"),v("code",[_._v("channel")]),_._v("从缓冲区读取字节。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/e8508f70216c43d181532c566baf58e5.jpeg",alt:"img"}})]),_._v(" "),v("p",[v("code",[_._v("channel")]),_._v("通道是双向的，不像是BIO那样是流（单向的），所以可以"),v("strong",[_._v("同时读写数据")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"buffer"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#buffer"}},[_._v("#")]),_._v(" Buffer")]),_._v(" "),v("p",[_._v("在数据打包和传输的方式上，BIO是面向流进行传输的，也就是一个字节一个字节这样传输，效率是比较慢的；而NIO就是"),v("strong",[_._v("面向块")]),_._v("进行传输的。")]),_._v(" "),v("p",[_._v("缓冲区一般来说是个字节数组，但又不仅仅是个字节数组，还是一个可以跟踪系统的读/写进程。")]),_._v(" "),v("p",[_._v("缓冲区类型用的最多的是"),v("code",[_._v("ByteBuffer")]),_._v("，八大数据类型每个都有自己的缓冲区类型。")]),_._v(" "),v("p",[_._v("缓冲区中有三个重要的状态变量："),v("code",[_._v("position")]),_._v("、"),v("code",[_._v("limit")]),_._v("、"),v("code",[_._v("capacity")]),_._v(" 。")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("position")]),_._v(" ：表明下次读/写数据的位置；")]),_._v(" "),v("li",[v("code",[_._v("limit")]),_._v("：写模式下还可以写入多少数据、读模式下还可以读取多少数据；")]),_._v(" "),v("li",[v("code",[_._v("capacity")]),_._v("：表明缓冲区的最大存储数据容量；")])]),_._v(" "),v("p",[_._v("开始 初始化"),v("code",[_._v("capacity")]),_._v("为7的字节数组，此时"),v("code",[_._v("position")]),_._v("为0，"),v("code",[_._v("limit")]),_._v("为6；")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/e9150103ef4447a98064edc4bf3c8ac8.jpeg",alt:"img"}})]),_._v(" "),v("p",[_._v("开始写入数据，比如写入3个数据，此时"),v("code",[_._v("position")]),_._v("就到了该位置。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/9f24091692254d449941edd23ba1a5b9.jpeg",alt:"img"}})]),_._v(" "),v("p",[_._v("切换到读取数据模式，调用"),v("code",[_._v("flib()")]),_._v("方法")]),_._v(" "),v("ul",[v("li",[_._v("将"),v("code",[_._v("limit")]),_._v("设置到"),v("code",[_._v("position")]),_._v("的位置；")]),_._v(" "),v("li",[_._v("将"),v("code",[_._v("position")]),_._v("设置为0；")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/b6c80954050d4fd493fe9d85c2024035.jpeg",alt:"img"}})]),_._v(" "),v("p",[_._v("之后就一直读取数据，知道"),v("code",[_._v("position")]),_._v(" == "),v("code",[_._v("limit")]),_._v("，要知道 "),v("code",[_._v("position")]),_._v(" 是要小于或者等于 "),v("code",[_._v("limit")]),_._v("的。调用"),v("code",[_._v("clear()")]),_._v("方法。")]),_._v(" "),v("p",[v("code",[_._v("clear()")]),_._v("方法主要做了两件事：")]),_._v(" "),v("ul",[v("li",[_._v("将"),v("code",[_._v("limit")]),_._v("设置为"),v("code",[_._v("capacity")]),_._v("相同；")]),_._v(" "),v("li",[_._v("设置"),v("code",[_._v("position")]),_._v("为0。")])]),_._v(" "),v("h2",{attrs:{id:"selector"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#selector"}},[_._v("#")]),_._v(" Selector")]),_._v(" "),v("p",[_._v("传统的BIO中，写出和读取数据都是会阻塞的，需要等到完全读取或者完全写出才能有下一步的操作。所以需要采用异步IO，在读取数据的同时也可以写出数据。同步程序常常要 求助于 轮询，或者创建大量的线程连接；而异步程序不需要求助轮询，只需要少数的线程就可以监听管理任何通道的事件。")]),_._v(" "),v("p",[_._v("下面内容是参考 知乎 "),v("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/363504902",target:"_blank",rel:"noopener noreferrer"}},[_._v("岛雨"),v("OutboundLink")],1),_._v(" 的文章；")]),_._v(" "),v("p",[_._v("我们知道BIO中，有两个阻塞（监听阻塞、读取/写出数据时阻塞），而NIO就是为了解决这两个根本的阻塞而产生的；")]),_._v(" "),v("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://img-blog.csdnimg.cn/76f38a2fc2ef47ea8223db86115623f1.jpeg",alt:"img"}}),_._v(" "),v("p",[_._v("代码就不实现了。。。。。")]),_._v(" "),v("p",[_._v("讲"),v("code",[_._v("selector")]),_._v("之前首先我们要了解IO多路复用器")]),_._v(" "),v("p",[_._v("根据操作系统的知识我们知道，计算机硬件资源是有"),v("strong",[_._v("内核态")]),_._v("来控制的，而我们的程序是运行在"),v("strong",[_._v("用户态")]),_._v("的，但IO相关的函数是在内核态的。所以发生IO读写操作的时候，会有内核态到用户态的切换过程，而这个过程代价很大，需要减少切换次数。")]),_._v(" "),v("p",[_._v("在没有"),v("code",[_._v("selector")]),_._v("时我们在内核态和用户态的切换过程中付出的代价很大，由此，看能不能一次性将把要检查的"),v("code",[_._v("socket")]),_._v("全部扔给内核态，让内核态告诉我们有哪些socket有客户端来连接了，有哪些socket有客户端来发送数据了，然后针对性地做出相应的处理即可，而不是一个一个"),v("code",[_._v("socket")]),_._v("连接去找内核检查对应的状态。"),v("strong",[_._v("IO多路复用器")]),_._v("应运而生。")]),_._v(" "),v("p",[_._v("Selector类  = NIO + IO多路复用器 封装")]),_._v(" "),v("p",[_._v("简单来说Selector就是一条线程可以管理多个管道")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/fe074f2a83a64c96886a4b2235fbb979.jpeg",alt:"img"}})])])}),[],!1,null,null,null);v.default=c.exports}}]);